package 动态规划;
/**
 * @Time 2021-11-8
 * @Title leetcode_91 解码方法
 * @Difficulty_Level middle
 */
/*
    只考虑第i位和i-1的关系，所以考虑到用动态规划去解决该问题。这里我们从前往后去处理字符串。对于s上的某个位置i，我们只关心其能否独立形成字母
    和能否与上一位置形成字母，而不考虑i-1之前的位置。所以这里我们定义动态数组f[i]去存储其方案数。这里我们考虑三种情况:
    1.只能由位置i单独作为一个字母，设为a，条件是在范围[1,9]，状态转移方程为f[i]=f[i-1]
    2.只能用位置i与前一个位置i-1共同作为一个字母，设为b，条件是在范围[10,26]，状态转移方程为f[i]=f[i-2]
    3.位置 i 既能作为独立字母也能与上一位置形成字母，转移逻辑为 f[i] = f[i - 1] + f[i - 2]。
 */
public class leetcode_91 {
    public int numDecodings(String s) {
        int n = s.length();
        s = " " + s;
        char[] cs = s.toCharArray();
        int[] f = new int[n + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            // a : 代表「当前位置」单独形成字母
            // b : 代表「当前位置」与「前一位置」共同形成字母
            int a = cs[i] - '0', b = (cs[i - 1] - '0') * 10 + (cs[i] - '0');
            // 如果 a 属于有效值，那么 f[i] 可以由 f[i - 1] 转移过来
            if (1 <= a && a <= 9) f[i] = f[i - 1];
            // 如果 b 属于有效值，那么 f[i] 可以由 f[i - 2] 或者 f[i - 1] & f[i - 2] 转移过来
            if (10 <= b && b <= 26) f[i] += f[i - 2];
        }
        return f[n];
    }
}
